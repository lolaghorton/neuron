Explaination of the analysis done. Contains description of the plotting scripts, the analysis scripts, the processed data, and any extra tools used. 

Plotting scripts provided by K. E. Petousakis through GitHub: https://github.com/kepetousakis/petousakis_etal_2023. Plot scripts 1-19 along with Code_General_utility_spikes_pickling.py, Code_General_Nassi_functions.py, environment.yml, Data_dendrite_properties.tsv from Petousakis's git are all used. Within the link the readme states how to setup the virtual environment needed through Anaconda for Windows or Unix machines.
Plotting scripts starting with numbers 11, 14, and 15 were for supplemental figures from the original paper (Petousakis et al., 2023) and were not reproduced, thus have no corresponding analysis script. Plotting script beginning in 12 was based on data from the original study preformed with mice, the raw data was unavailable and thus not reproduced, and there is no corresponding script for 12 either. The 13th plot scipt doesnt require any analysis, that script can just be run and the figure will be produced. The 10th script just requires a raw voltage trace (.dat file), instructions on what to run can be found in the read me file within /sh_files.
Analysis scripts written by me. Sampleplot.py was just a spot I used to plot up some traces during repoduction to be sure I was on the right track, it is not vital for reproduction.

analysis_i3p.py: For iterative paired pulse protocol. This script grabs all the traces, truncates them to 500 ms as the total simulation time (5001 points), then stores each trace under its dendrite ID (valcrit) and synapse ID (scalefactor) then saves the data to ./../data/i3p/. The corresponding plotting script that is used with this starts with 01. 

analysis_oritune.py: For orientation tuning protocol. This script reads in each soma trace from the stim angle, neuron, and run it is from. Then calculated the firing rate by counting the number of spikes in the trace (not including any before 500 ms since stimulus is presented until 500 ms) and dividing by 2000 ms (the time in which stimulus is present). Other averages and standard erros are calculated and everything is saved to ./../data/oritune-f2a/. The plot script this is used for starts with 02. 

analysis_oridisp.py: For orientation disparity protocol. The expected orientation preference is calculated (which assumes linearity to see which way the prefernce tips towards, apical or basal, when the data is plotted in comparison) Then the firing rates are calculated similarly as for orientation tuning above, taking into account each disparity angle as well (like doing the ori tune analysis 10 times). This script also requires the processed data to be filtered, so we calculate the OSI and tuning width. If the OSI <0.2 or tuning width >80Â° the neuron is rejected from the final data. Results saved to ./../data/oridisp-f2def/. This file must be run 3 times for the biologically plausible, inverse, and even conditions. Corresponding plot scrip is 03. 

analysis_ablation.py: For ablation protocol. This is identical to the orientation tuning analysis script, just used again. Results saved to ./../data/ablation-f2sup5/. PLotting script begins with 19. 

spiketime.py: This is used for both ionic and synaptic intervention protocols. This runs through each stimulus_presentation, n_neuron, and n_run to find each spike that occurs per run then saves the time at which it happened. Since there can be multiple spikes per run a spike number is added when saving. Format for ionic intervention is: neuron run spike_num time_ms, for synaptic intervention: stim neuron run spike_num time_ms, both output as .txt file.

analysis_ionint.py: starts with a function to load the pre intervention times. create_verdict_pickle() takes for the bio or even conditions, angles both 0 and 90, the process to make the pickle file. It called process_interventions() which from the spike timings file will read each line and make a key from that, each key is then tested by calling check_intervention_survival(). This function uses the key given from process_interventions and checks if there is a spike at the time found from pre intervention and returns if it survived. Then process_interventions creates a verdict from the survival as it test if it survived apical and basal intervention. The verdict is back to create_verdict_pickle that wraps it into a pickle file. Needs to be run twice changing condition in create_verdict_pickle between bio and even, as well as changing the prefix on the output file from vn to fn repectivly. Saves to ./data/ionint-f3/, to be used with plot script 04. 

analysis_synint.py: For the case of nullifying all stim driven synapses the analysis just used the orientation tuning script again, saved to ./../data/synint-f4/4a/, for plot script 05. 
For the case of stim-driven synapses reduced by 50%, this script has a function to grab the pre intervention spike timings, one to do the analysis done for orientation tuning except for the pre intervention control data, and one to create the verdicts of if the interventions worked (spikes survived or not during apical or basal intervention) .This is saved to ./../data/synint-f4/stim-50/, and to be used with script 06. This same section can be used for the interevntion of nullifying sodium conductance and the sensitivity analysis as well, plot scripts 07, 16, 17.

analysis_fig5.py: This is all analysis done on the i3p data as well, used again later in the original manuscript for figure 5 (hence the name). This also have three sections for three plot scripts (08, 09, 18). It starts with 09, re using the function from the i3p analysis to read in the dendrite data but only for Na spiking (val_na=1). Then it finds when a spike occurs and what synapse (scalefactor) got it there (the spiking threshold). Saved to ./../data/figure5/pet09-5cd/. Then we move on to 18, where we read in the i3p dendrite data again, as well as the soma traces. Then for each dendrite find when a spike occurs and which threshold (scalefactor) got it there. Using that dendrite ID and scalefactor threshold number we grab to corresponding soma trace and calculate the attenuation at the soma from the dendritic spike (max value from the dendrite trace - max value of the soma trace). Saved to ./../data/figure5/pet18-5sabef/. Lastly we have the plot scipt starting with 08. This one is similar to the set up of the analysis for plto script 18, however we calculate EPSP attenuation at the soma instead. This analysis does not produce identical results to the original manuscript of Petousakis et al., 2023, however the general pattern is similar. Saved to ./../data/figure5/pet08-5ab-scd/



